# -*- CMakeLists.txt generated by CodeLite IDE. Do not edit by hand -*-

cmake_minimum_required(VERSION 3.0)

# Project name
project(pinfo)

# This setting is useful for providing JSON file used by CodeLite for code completion
set(CMAKE_EXPORT_COMPILE_COMMANDS 1)

# Set default locations
set(CL_OUTPUT_DIRECTORY ${CMAKE_CURRENT_LIST_DIR}/../../cmake-build-Release/output)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CL_OUTPUT_DIRECTORY})
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CL_OUTPUT_DIRECTORY})
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CL_OUTPUT_DIRECTORY})

set(CONFIGURATION_NAME "Release")

# Projects


# Top project
# Define some variables
set(PROJECT_pinfo_PATH "${CMAKE_CURRENT_LIST_DIR}")
set(WORKSPACE_PATH "${CMAKE_CURRENT_LIST_DIR}/../..")



#{{{{ User Code 1
# Place your code here
set(PROGRAM_PERMISSIONS_DEFAULT
    OWNER_WRITE OWNER_READ OWNER_EXECUTE
    GROUP_READ GROUP_EXECUTE
    WORLD_READ WORLD_EXECUTE)

# --- SysIo Begin. Do not edit by hand -----------------------------------------
# Modifies binary file paths if codelite is not used.
if (NOT CL_USED)
  set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})
  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})
  set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})
endif (NOT CL_USED)

if(PIDUINO_LIB_DIR)
  link_directories(${PIDUINO_LIB_DIR})
  add_definitions(${PIDUINO_CFLAGS_OTHER})
  include_directories(BEFORE ${PIDUINO_INC_DIR} ${PIDUINO_LIB_DIR} ${CMAKE_CURRENT_BINARY_DIR})
  list(APPEND LINK_OPTIONS piduino Threads::Threads ${PIDUINO_LDFLAGS_OTHER})
else()
  find_package(piduino REQUIRED)
  link_directories(${PIDUINO_LIBRARY_DIRS})
  add_definitions(${PIDUINO_CFLAGS})
  include_directories(BEFORE ${PIDUINO_INCLUDE_DIRS} ${CMAKE_CURRENT_BINARY_DIR})
  list(APPEND LINK_OPTIONS ${PIDUINO_LIBRARIES})
  include (GitVersion)
endif()

WriteGitVersionFile(${CMAKE_CURRENT_BINARY_DIR}/version.h)

configure_file(${PROJECT_NAME}.1.in ${CMAKE_BINARY_DIR}/${PROJECT_NAME}.1 @ONLY)
if (GZIP_FOUND)
  gzip_compress(${PROJECT_NAME}_man ${CMAKE_BINARY_DIR}/${PROJECT_NAME}.1 ${CMAKE_BINARY_DIR}/${PROJECT_NAME}.1.gz)
  set(TARGET_MANPAGE_NAME "${PROJECT_NAME}.1.gz")
else()
  set(TARGET_MANPAGE_NAME "${PROJECT_NAME}.1")
endif()

# --- SysIo End. Do not edit by hand -------------------------------------------
#}}}}

include_directories(
    .
    .

)


# Compiler options
# add_definitions(-O2)
# add_definitions(-Wall)
# add_definitions(
#     -DNDEBUG
# )


# Linker options


if(WIN32)
    # Resource options
endif(WIN32)

# Library path
set(CMAKE_LDFLAGS "${CMAKE_LDFLAGS} -L. ")

# Define the CXX sources
set ( CXX_SRCS
    ${CMAKE_CURRENT_LIST_DIR}/main.cpp
)

set_source_files_properties(
    ${C_SRCS} PROPERTIES COMPILE_FLAGS 
    " -O2 -Wall")

if(WIN32)
    enable_language(RC)
    set(CMAKE_RC_COMPILE_OBJECT
        "<CMAKE_RC_COMPILER> ${RC_OPTIONS} -O coff -i <SOURCE> -o <OBJECT>")
endif(WIN32)



#{{{{ User Code 2
# Place your code here
#}}}}

add_executable(pinfo ${RC_SRCS} ${CXX_SRCS} ${C_SRCS})
target_link_libraries(pinfo ${LINK_OPTIONS})



#{{{{ User Code 3
# Place your code here

if(NOT INSTALL_BIN_DIR)
  set(INSTALL_BIN_DIR bin)
else()
  add_dependencies (pinfo piduino-shared)
endif()

install(TARGETS ${PROJECT_NAME} DESTINATION "${INSTALL_BIN_DIR}" 
        PERMISSIONS ${PROGRAM_PERMISSIONS_DEFAULT} COMPONENT utils)

install(FILES
  "${CMAKE_BINARY_DIR}/${TARGET_MANPAGE_NAME}"
  DESTINATION "${INSTALL_DATA_DIR}/man/man1" COMPONENT utils)

#}}}}
