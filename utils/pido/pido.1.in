.TH PIDO 1 "@DATE_DAY@ @DATE_MONTH_STR@ @DATE_YEAR@" "PIDUINO @PIDUINO_VERSION_MAJOR@.@PIDUINO_VERSION_MINOR@.@PIDUINO_VERSION_PATCH@" "Easy access to the GPIO pins"

.SH NAME
pido \- Allow the user easy access to the GPIO pins, or other devices, such as I2C or SPI peripherals (ADC, DAC, Digital sensors, GPIO expander).

.SH SYNOPSIS
\fBpido\fR [\fB\-g1sfDxmad\fR] {\fBmode\fR \fIpin\fR [\fIvalue\fR] | 
\fBpull\fR \fIpin\fR [\fIvalue\fR] |
\fBdrive\fR \fIpin\fR [\fIvalue\fR] |
\fBwrite\fR \fIpin\fR \fIvalue\fR |
\fBtoggle\fR \fIpin\fR |
\fBblink\fR \fIpin\fR [\fIvalue\fR] |
\fBread\fR \fIpin\fR |
\fBreadall\fR [\fIconnector\fR] |
\fBwfi\fR \fIpin\fR \fIedge\fR  [\fItimeout_ms\fR] |
\fBpwm\fR \fIpin\fR [\fIvalue\fR] |
\fBpwmf\fR \fIpin\fR [\fIhz_freq\fR] |
\fBpwmr\fR \fIpin\fR [\fIrange\fR] |
\fBpwrite\fR \fIpin\fR \fBvalue\fR [\fIrange\fR] [\fIfrequency\fR] |
\fBconverters\fR |
\fBcwrite\fR \fB\-c\fR \fIconverter[:parameters]\fR [\fIchan\fR] \fIvalue\fR |
\fBcread\fR \fB\-c\fR \fIconverter[:parameters]\fR [\fIchan\fR] |
{\fB\-v\fR} | {\fB\-w\fR} | {\fB\-h\fR}}

.SH DESCRIPTION
.PP
\fBpido\fR is a command line tool that allows the user easy access to the GPIO pins
on a Pi board. It's designed for simple testing and diagnostic purposes, but can 
be used in shell scripts for general, if somewhat slow, control of the GPIO pins.

\fBpido\fR uses the piduino library https://github.com/epsilonrt/piduino. Board 
model detection is automatic and uses a database, allowing a user to add 
a new Pi board "variant" \fBwithout\fR programming.

.TP
\fBmode\fR \fIpin\fR [\fBin\fR | \fBout\fR | \fBoff\fR | \fBpwm\fR | \fBalt{0..9}\fR]
Gets the current mode if no value is supplied.

Sets a pin into \fIinput\fR, \fIoutput\fR, \fIpwm\fR, \fIalt{0..9}\fR or \fIoff\fR mode. 
Disabling a pin with \fIoff\fR is only available on some SoC models (see datasheet).

The ALT modes can also be set using \fIalt0\fR, \fIalt1\fR,  ... \fIalt9\fR.
The number of alternative modes available depends on the SoC model (see datasheet).

You can use the \fB-c\fR option to specify a gpio expander (e.g. MCP23017 or MAX7311), 
in this case:
    \(bu all modes are not generally available (input and output)
    \(bu you can omit the pin number to modify all pins at once.

.TP
\fBpull\fR \fIpin\fR [\fBup\fR | \fBdown\fR | \fBoff\fR]
Gets the current state of the resistor if no value is supplied. This feature is 
only available on some SoC models (see datasheet).

Use \fIup\fR, \fIdown\fR or \fIoff\fR to set the internal pull-up, pull-down, or 
off (tristate) controls.

You can use the \fB-c\fR option to specify a gpio expander (e.g. MCP23017 or MAX7311), 
in this case, you can omit the pin number to modify all pins at once.

.TP
\fBdrive\fR \fIpin\fR [\fBlevel\fR]
Gets the current state of the pin drive strength if no value is supplied. 

Use \fIlevel\fR to set the pin drive strength.

This feature is only available on some SoC models (see datasheet).

.TP
\fBwrite\fR \fIpin\fR \fBvalue\fR
Write the given value to the pin. You need to set the pin
to output mode first.

You can use the \fB-c\fR option to specify a gpio expander (e.g. MCP23017 or MAX7311), 
in this case, you can omit the pin number to modify all pins at once.

.TP
\fBtoggle\fR \fIpin\fR
Changes the state of a GPIO pin; 0 to 1, or 1 to 0. You need to set the pin
to output mode first.

You can use the \fB-c\fR option to specify a gpio expander (e.g. MCP23017 or MAX7311), 
in this case, you can omit the pin number to modify all pins at once.

.TP
\fBblink\fR \fIpin\fR
Blinks the given pin on/off. Press Ctrl-C to exit. The flashing period in 
milliseconds can be specified with the \fB-p\fR option; otherwise, its default value is 1000 
(it cannot be less than 2 ms).

Note: This command explicitly sets the pin to output mode.

You can use the \fB-c\fR option to specify a gpio expander (e.g. MCP23017 or MAX7311), 
in this case, you can omit the pin number to modify all pins at once.

.TP
\fBread\fR \fIpin\fR
Read the digital value of the given pin and print 0 or 1 to represent the
corresponding logic levels.

You can use the \fB-c\fR option to specify a gpio expander (e.g. MCP23017 or MAX7311), 
in this case, you can omit the pin number to read all pins at once (in hexadecimal format).

.TP
\fBreadall\fR [\fIconnector\fR]
Outputs a table of all GPIO pin values. The values represent the actual values read
if the pin is in input mode, or the last value written if the pin is in output
mode. All connectors are displayed by default; to display only one connector, 
just specify its number (listed above the table).

You can use the \fB-c\fR option to specify a gpio expander (e.g. MCP23017 or MAX7311), 
in this case, the connector number will be ignored and all pins on the expander will be read (in hexadecimal format).

.TP
\fBwfi\fR \fIpin\fR \fBrising\fR | \fBfalling\fR | \fBboth\fR [\fItimeout_ms\fR]
This sets the given pin to the supplied interrupt mode: rising, falling,
or both, then waits for the interrupt to happen. It's a non-busy wait,
so does not consume any CPU while it's waiting.

.TP
\fBpwm\fR \fIpin\fR [\fIvalue\fR]
Write a PWM value (0 to Range) to the given pin. 
If the frequency has not been set with the \fBpwmf\fR command, the frequency is 
set to approximately 1000 Hz and the range to 1024 during the first call 
(default values).

Read the current PWM value if no value supplied.

Note: The pin must have hardware PWM functionality (see datasheet) and needs to
be put into PWM mode first.

.TP
\fBpwmf\fR \fIpin\fR [\fIhz_freq\fR]
Change the PWM frequency of the given pin. This change may affect the frequency 
of the other PWM pins (see datasheet).

Read the current PWM frequency if no value supplied.

Note: The pin must have hardware PWM functionality (c.f. datasheet) and needs to
be put into PWM mode first.

.TP
\fBpwmr\fR \fIpin\fR [\fIrange\fR]
Change the PWM range of the given pin. This change should affect the frequency 
and the on/off ratio of the PWM signal, so it will probably be necessary to
also change these values to achieve the desired effect (see datasheet).

Read the current PWM range if no value supplied.

Note: The pin must have hardware PWM functionality (c.f. datasheet) and needs to
be put into PWM mode first.

.TP
\fBpwrite\fR \fIpin\fR \fBvalue\fR [\fIrange\fR] [\fIfrequency\fR]
Writes the given value to the pin using a software PWM. The value must be
between 0 and the range (default 1024). The frequency is optional and defaults to 200 Hz.
This command is useful for pins that do not have hardware PWM support.
This command blocks until the user interrupts it with Ctrl-C.

.TP
\fBconverters\fR
List all available converters (ADC or DACs) that can be used with the \fBcwrite\fR or \fBcread\fR commands.

.TP
\fBcwrite\fR \fB\-c\fR \fIconverter[:parameters]\fR [\fIchan\fR] \fIvalue\fR
Writes the given value to the specified converter (DAC). The converter must be specified with the \fB\-c\fR option, 
and it can include parameters such as the bus ID, reference voltage, full-scale range... 
If the converter requires specific channel information, it must be provided as well.

.TP
\fBcread\fR \fB\-c\fR \fIconverter[:parameters]\fR [\fIchan\fR]
Read a value from the specified converter (ADC or sensor). If \fIchan\fR is not specified, 
the default channel is used. The converter must be specified with the \fB\-c\fR option, 
and it can include parameters such as the bus ID, reference voltage, full-scale range...

You can use the \fB-m\fR, \fB-a\fR, and \fB-d\fR options to modify the read behavior.

.SH OPTIONS

.TP
.B \-g
Use the SoC pin numbers rather than PiDuino pin numbers.

.TP
.B \-1
Use the connector pin numbers rather than PiDuino pin numbers. A number is 
written in the form C.N, e.g.: 1.5 denotes pin 5 of connector 1.

.TP
.B \-s
Use the System pin numbers rather than PiDuino pin numbers.

.TP
.B \-D
Enable debug mode.

.TP
.B \-f
Force the use of the Gpio2 device interface (/dev/gpiochipX) to control pin features.

.TP
.B \-p \fI<period_ms>\fR
Set the blink period in milliseconds (default is 1000 ms). Not less than 2 ms.

.TP
.B \-x
Output values in hexadecimal format.

.TP
\fB\-c\fR \fIconverter[:parameters]\fR
Specify the converter to use and its options (e.g., -c max1161x:bipolar=1).

.TP
.B \-m
Output ADC or digital sensor values in analog format (e.g. voltage, temperature...).

.TP
.B \-a
Calculates an average over several samples (the number of samples depends on the converter used).


.TP
.B \-d
Read ADC values in differential mode.

.TP
.B \-v
Show the PiDuino version.

.TP
.B \-w
Show the warranty notice.

.TP
.B \-h
Show a short usage summary.

.SH ENVIRONMENT
.RE
.PP
PIDUINO_CONN_INFO
.RS 4
If set, this variable allows the user to specify the location of the PiDuino 
database used by pido. It supports SQLite3, MySQL, PostgreSQL, as well as a 
connection to ODBC out of the box. See http://cppcms.com/sql/cppdb/connstr.html
for the syntax.

.SH FILES
.RE
.PP
/etc/piduino.conf
.RS 4
PiDuino configuration file to specify the board model to use or to indicate the 
location of the PiDuino database.
.RE
.PP
@PIDUINO_INSTALL_DATA_DIR@/piduino.db
.RS 4
PiDuino local SQLite 3 database file by default.
 
.SH EXAMPLES
.TP 2.2i
\fBpido mode\fR 0 \fBout\fR # Set pin 0 to output
.PP
The physical numbering in the form C.N, for example \fI1.11\fR, makes it 
possible to quickly designate pin N (here 11) of connector C (here 1).

The quickest way to get a list of the pin differences is to run the command:
.PP
\fBpido readall\fR
.PP
\fBpido mode\fR 1.11 \fBout\fR # Set pin 11 of connector 1 to output (same as pin 0 on NanoPi, Raspberry Pi)
.PP
\fBpido write\fR 0 1 # Set pin 0 to high
.PP
\fBpido toggle\fR 0 # Toggle the state of pin 0
.PP
\fBpido blink\fR 0 100 # Blink pin 0 with a period of 100 ms
.PP
\fBpido mode\fR 0 \fBin\fR # Set pin 0 to input
.PP
\fBpido pull\fR 0 \fBup\fR # Set pin 0 pull-up resistor
.PP
\fBpido read\fR 0 # Read pin 0
.PP
\fBpido wfi\fR 0 \fBfalling\fR # Wait for an interrupt on a falling edge of pin 0
.PP
\fBpido converters\fR # List all available converters
.PP
\fBpido\fR \fB\-c\fR gpiopwm:18:1024:500 \fBcwrite\fR 0 512 # Software PWM on pin 18, 50% duty cycle
.PP
\fBpido\fR \fB\-c\fR max1161x:bus=1:max=15:ref=int4 \fBcread\fR 0 # Read ADC channel 0 (MAX11615 on bus 1, internal reference voltage of 2.048V)
.PP
\fBpido\fR \fB\-c\fR max1161x:bus=1:max=15:bipolar=1 \fB\-md\fR \fBcread\fR 0 # Read differential ADC between channel 0 and 1 in analog format (MAX11615 on bus 1, bipolar mode)

.SH SEE ALSO
.PP
\fBpinfo\fR(1)
.PP
PiDuino Wiki page https://github.com/epsilonrt/piduino/wiki/PiDuino

.SH "REPORTING BUGS"
Please report bugs at https://github.com/epsilonrt/piduino/issues

.SH AUTHOR
Pascal JEAN, aka epsilonrt

.SH COPYRIGHT
Copyright (c) 2018-@DATE_YEAR@ Pascal JEAN
This is free software; see the source for copying conditions. There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
